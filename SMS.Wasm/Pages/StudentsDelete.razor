@page "/students/delete/{Id:int}"
@inject NavigationManager NavigationManager
@inject StudentService Service
@inject IToastService ToastService

<h3 class="mt-4 mb-4">Delete Student</h3>

<h4 class="mb-4">Are you sure you want to delete this Student?</h4>

@if (student == null)
{
    <p>Loading student...</p>
}
else 
{
    <dl class="row">
        <dt class="col-sm-3">Name</dt>
        <dd class="col-sm-9">@student.Name</dd>
        
        <dt class="col-sm-3">Course</dt>
        <dd class="col-sm-9">@student.Course</dd>
        
        <dt class="col-sm-3">Age</dt>
        <dd class="col-sm-9">@student.Age</dd>
        
        <dt class="col-sm-3">Email</dt>
        <dd class="col-sm-9">@student.Email</dd>
    </dl>
    <div class="row">
        <button @onclick="() => DeleteConfirm.Show()" class="btn btn-danger mr-3">Delete</button>
        <button @onclick="Cancel" class="btn btn-secondary">Cancel</button>
    </div>

    <ConfirmComponent ConfirmationChanged="Delete" @ref="DeleteConfirm"></ConfirmComponent>

}
@code {
    protected ConfirmComponent DeleteConfirm { get; set;}
  
    [Parameter]
    public int Id { get; set; }
    public StudentDto student { get; set; }

    protected override async Task OnInitializedAsync()
    {           
        var result = await Service.GetStudent(Id);  
        result.Match(
            s => student = s,
            e => ToastService.ShowError(e.Message)
        );     
    }

    private async Task Delete(bool deleteConfirmed)
    {
        if (deleteConfirmed)
        {
            var result = await Service.DeleteStudent(Id); 
            result.Match(
                s => {
                    NavigationManager.NavigateTo("students");
                    ToastService.ShowSuccess("Student deleted successfully");
                },
                e => ToastService.ShowError(e.Message)
            ); 
        }
    }

    private void Cancel()
    {        
         NavigationManager.NavigateTo("students");
    }
}